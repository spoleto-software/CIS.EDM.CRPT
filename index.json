{
  "api/CIS.EDM.CRPT.Models.CRPTOption.AuthUrl.html": {
    "href": "api/CIS.EDM.CRPT.Models.CRPTOption.AuthUrl.html",
    "title": "Property AuthUrl | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property AuthUrl | Improve this Doc View Source AuthUrl Адрес единой аутентификации True API. Declaration public string AuthUrl { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.CRPTOption.CertificateThumbprint.html": {
    "href": "api/CIS.EDM.CRPT.Models.CRPTOption.CertificateThumbprint.html",
    "title": "Property CertificateThumbprint | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property CertificateThumbprint | Improve this Doc View Source CertificateThumbprint Публичный отпечаток сертификата. Declaration public string CertificateThumbprint { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.CRPTOption.html": {
    "href": "api/CIS.EDM.CRPT.Models.CRPTOption.html",
    "title": "Class CRPTOption | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class CRPTOption Настройки ЦРПТ провайдера. Inheritance System.Object CRPTOption Implements System.IEquatable < CRPTOption > Namespace : CIS.EDM.CRPT.Models Assembly : CIS.EDM.CRPT.dll Syntax public class CRPTOption : IEdmOption, IEquatable<CRPTOption> Properties Name Description AuthUrl Адрес единой аутентификации True API. CertificateThumbprint Публичный отпечаток сертификата. ServiceUrl Адрес ЦРПТ сервиса."
  },
  "api/CIS.EDM.CRPT.Models.CRPTOption.ServiceUrl.html": {
    "href": "api/CIS.EDM.CRPT.Models.CRPTOption.ServiceUrl.html",
    "title": "Property ServiceUrl | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property ServiceUrl | Improve this Doc View Source ServiceUrl Адрес ЦРПТ сервиса. Declaration public string ServiceUrl { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.html": {
    "href": "api/CIS.EDM.CRPT.Models.html",
    "title": "Namespace CIS.EDM.CRPT.Models | Spoleto.CIS.EDM.CRPT",
    "keywords": "Namespace CIS.EDM.CRPT.Models Classes CRPTOption Настройки ЦРПТ провайдера. SignedDocumentInfo Тело документа + его открепленная подпись. StringResult Результат отправки УПД TokenModel Пакет успешного ответа на POST запрос получения токена. ZipArchiveInfo Zip файл с именем."
  },
  "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.Content.html": {
    "href": "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.Content.html",
    "title": "Property Content | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property Content | Improve this Doc View Source Content Тело документа. Declaration public string Content { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.DetachedSignature.html": {
    "href": "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.DetachedSignature.html",
    "title": "Property DetachedSignature | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property DetachedSignature | Improve this Doc View Source DetachedSignature Открепленная цифровую подпись документа. Declaration public string DetachedSignature { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.html": {
    "href": "api/CIS.EDM.CRPT.Models.SignedDocumentInfo.html",
    "title": "Class SignedDocumentInfo | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class SignedDocumentInfo Тело документа + его открепленная подпись. Inheritance System.Object SignedDocumentInfo Implements System.IEquatable < SignedDocumentInfo > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CIS.EDM.CRPT.Models Assembly : CIS.EDM.CRPT.dll Syntax public class SignedDocumentInfo : IEquatable<SignedDocumentInfo> Properties Name Description Content Тело документа. DetachedSignature Открепленная цифровую подпись документа."
  },
  "api/CIS.EDM.CRPT.Models.StringResult.html": {
    "href": "api/CIS.EDM.CRPT.Models.StringResult.html",
    "title": "Class StringResult | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class StringResult Результат отправки УПД Inheritance System.Object StringResult Implements System.IEquatable < StringResult > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CIS.EDM.CRPT.Models Assembly : CIS.EDM.CRPT.dll Syntax public class StringResult : IEquatable<StringResult> Properties Name Description Id Уникальный идентификатор события создания файла информации продавца Methods Name Description ToString()"
  },
  "api/CIS.EDM.CRPT.Models.StringResult.Id.html": {
    "href": "api/CIS.EDM.CRPT.Models.StringResult.Id.html",
    "title": "Property Id | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property Id | Improve this Doc View Source Id Уникальный идентификатор события создания файла информации продавца Declaration [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value Type Description System.String Remarks По данному идентификатору можно производить с документом необходимые действия (редактирование, подписание и т.д.)"
  },
  "api/CIS.EDM.CRPT.Models.StringResult.ToString.html": {
    "href": "api/CIS.EDM.CRPT.Models.StringResult.ToString.html",
    "title": "Method ToString | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/CIS.EDM.CRPT.Models.TokenModel.html": {
    "href": "api/CIS.EDM.CRPT.Models.TokenModel.html",
    "title": "Class TokenModel | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class TokenModel Пакет успешного ответа на POST запрос получения токена. Inheritance System.Object TokenModel Implements System.IEquatable < TokenModel > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CIS.EDM.CRPT.Models Assembly : CIS.EDM.CRPT.dll Syntax public class TokenModel : IEquatable<TokenModel> Properties Name Description Token Аутентификационный токен. Type Ключевое слово, которое используется перед токеном. Methods Name Description ToString()"
  },
  "api/CIS.EDM.CRPT.Models.TokenModel.Token.html": {
    "href": "api/CIS.EDM.CRPT.Models.TokenModel.Token.html",
    "title": "Property Token | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property Token | Improve this Doc View Source Token Аутентификационный токен. Declaration [JsonPropertyName(\"token\")] [Required] public string Token { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.TokenModel.ToString.html": {
    "href": "api/CIS.EDM.CRPT.Models.TokenModel.ToString.html",
    "title": "Method ToString | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/CIS.EDM.CRPT.Models.TokenModel.Type.html": {
    "href": "api/CIS.EDM.CRPT.Models.TokenModel.Type.html",
    "title": "Property Type | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property Type | Improve this Doc View Source Type Ключевое слово, которое используется перед токеном. Declaration [JsonIgnore] public string Type { get; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.FileName.html": {
    "href": "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.FileName.html",
    "title": "Property FileName | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property FileName | Improve this Doc View Source FileName Имя файла. Declaration public string FileName { get; set; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.html": {
    "href": "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.html",
    "title": "Class ZipArchiveInfo | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class ZipArchiveInfo Zip файл с именем. Inheritance System.Object ZipArchiveInfo Implements System.IEquatable < ZipArchiveInfo > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CIS.EDM.CRPT.Models Assembly : CIS.EDM.CRPT.dll Syntax public class ZipArchiveInfo : IEquatable<ZipArchiveInfo> Properties Name Description FileName Имя файла. ZipArchive Zip файл."
  },
  "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.ZipArchive.html": {
    "href": "api/CIS.EDM.CRPT.Models.ZipArchiveInfo.ZipArchive.html",
    "title": "Property ZipArchive | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property ZipArchive | Improve this Doc View Source ZipArchive Zip файл. Declaration public ZipArchive ZipArchive { get; set; } Property Value Type Description System.IO.Compression.ZipArchive"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.Code.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.Code.html",
    "title": "Property Code | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property Code | Improve this Doc View Source Code Уникальный код провайдера. Declaration public string Code { get; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.-ctor.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.-ctor.html",
    "title": "Constructor CRPTProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Constructor CRPTProvider | Improve this Doc View Source CRPTProvider(ILogger<CRPTProvider>, IHttpClientFactory, ICRPTTokenProvider) Конструктор с параметрами. Declaration public CRPTProvider(ILogger<CRPTProvider> logger, IHttpClientFactory httpClientFactory, ICRPTTokenProvider tokenProvider = null) Parameters Type Name Description ILogger < CRPTProvider > logger IHttpClientFactory httpClientFactory ICRPTTokenProvider tokenProvider"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.DisplayName.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.DisplayName.html",
    "title": "Property DisplayName | Spoleto.CIS.EDM.CRPT",
    "keywords": "Property DisplayName | Improve this Doc View Source DisplayName Название провайдера для отображения Declaration public string DisplayName { get; } Property Value Type Description System.String"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingDocumentAsync.html",
    "title": "Method GetIncomingDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetIncomingDocumentAsync | Improve this Doc View Source GetIncomingDocumentAsync(CRPTOption, String) Получение содержимого XML входящего документа Declaration public async Task<string> GetIncomingDocumentAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description System.Threading.Tasks.Task < System.String > Содержимое XML входящего документа"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingDocumentListAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingDocumentListAsync.html",
    "title": "Method GetIncomingDocumentListAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetIncomingDocumentListAsync | Improve this Doc View Source GetIncomingDocumentListAsync(CRPTOption, DocumentCollectionSearchModel) Получение списка входящих документов Declaration public async Task<DocumentCollection> GetIncomingDocumentListAsync(CRPTOption settings, DocumentCollectionSearchModel searchModel = null) Parameters Type Name Description CRPTOption settings Настройки для API DocumentCollectionSearchModel searchModel Критерии отбора документов Returns Type Description System.Threading.Tasks.Task < DocumentCollection > Список входящих документов"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingSignedDocumentInfoAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetIncomingSignedDocumentInfoAsync.html",
    "title": "Method GetIncomingSignedDocumentInfoAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetIncomingSignedDocumentInfoAsync | Improve this Doc View Source GetIncomingSignedDocumentInfoAsync(CRPTOption, String) Declaration public async Task<SignedDocumentInfo> GetIncomingSignedDocumentInfoAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings System.String documentId Returns Type Description System.Threading.Tasks.Task < SignedDocumentInfo > Implements ICRPTProvider.GetIncomingSignedDocumentInfoAsync(CRPTOption, String)"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetOutgoingDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetOutgoingDocumentAsync.html",
    "title": "Method GetOutgoingDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetOutgoingDocumentAsync | Improve this Doc View Source GetOutgoingDocumentAsync(CRPTOption, String) Получение содержимого XML исходящего документа Declaration public async Task<string> GetOutgoingDocumentAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description System.Threading.Tasks.Task < System.String > Содержимое XML исходящего документа"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetOutgoingDocumentListAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.GetOutgoingDocumentListAsync.html",
    "title": "Method GetOutgoingDocumentListAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetOutgoingDocumentListAsync | Improve this Doc View Source GetOutgoingDocumentListAsync(CRPTOption, DocumentCollectionSearchModel) Получение списка исходящих документов Declaration public async Task<DocumentCollection> GetOutgoingDocumentListAsync(CRPTOption settings, DocumentCollectionSearchModel searchModel = null) Parameters Type Name Description CRPTOption settings Настройки для API DocumentCollectionSearchModel searchModel Критерии отбора документов Returns Type Description System.Threading.Tasks.Task < DocumentCollection > Список исходящих документов"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.html",
    "title": "Class CRPTProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class CRPTProvider Провайдер для работы с ЭДО от ЦРПТ. Inheritance System.Object CRPTProvider Implements ICRPTProvider IEdmProvider < CRPTOption > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CIS.EDM.CRPT.Providers Assembly : CIS.EDM.CRPT.dll Syntax public class CRPTProvider : ICRPTProvider Constructors Name Description CRPTProvider(ILogger<CRPTProvider>, IHttpClientFactory, ICRPTTokenProvider) Конструктор с параметрами. Properties Name Description Code Уникальный код провайдера. DisplayName Название провайдера для отображения Methods Name Description GetIncomingDocumentAsync(CRPTOption, String) Получение содержимого XML входящего документа GetIncomingDocumentListAsync(CRPTOption, DocumentCollectionSearchModel) Получение списка входящих документов GetIncomingSignedDocumentInfoAsync(CRPTOption, String) GetOutgoingDocumentAsync(CRPTOption, String) Получение содержимого XML исходящего документа GetOutgoingDocumentListAsync(CRPTOption, DocumentCollectionSearchModel) Получение списка исходящих документов PostUniversalTransferDocumentAsync(CRPTOption, Models.V5_01.Seller.SellerUniversalTransferDocument, Boolean) Отправка универсального передаточного документа (УПД) в формате приказа \"№820\". Метод загрузки файла информации продавца УПД согласно приказа 820 от 19.12.2018 № ММВ-7-15/820@ в формате XML PostUniversalTransferDocumentAsync(CRPTOption, Models.V5_03.Seller.SellerUniversalTransferDocument, Boolean) Отправка универсального передаточного документа (УПД) в формате приказа \"№970\". Метод загрузки файла информации продавца УПД согласно приказа ФНС России от 19.12.2023 N ЕД-7-26/970@ (ред. от 15.11.2024) в формате XML ReceiptUniversalTransferDocumentAsync(CRPTOption, Models.V5_01.Buyer.BuyerUniversalTransferDocument) Добавление извещения о получении к документу в формате приказа \"№820\". ReceiptUniversalTransferDocumentAsync(CRPTOption, Models.V5_03.Buyer.BuyerUniversalTransferDocument) Добавление извещения о получении к документу в формате приказа \"№970\". SignOutgoingDocumentAsync(CRPTOption, String) Подписание исходящего документа ToString() Текстовое представление провайдера."
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.PostUniversalTransferDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.PostUniversalTransferDocumentAsync.html",
    "title": "Method PostUniversalTransferDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method PostUniversalTransferDocumentAsync | Improve this Doc View Source PostUniversalTransferDocumentAsync(CRPTOption, Models.V5_01.Seller.SellerUniversalTransferDocument, Boolean) Отправка универсального передаточного документа (УПД) в формате приказа \"№820\". Метод загрузки файла информации продавца УПД согласно приказа 820 от 19.12.2018 № ММВ-7-15/820@ в формате XML Declaration public async Task<ResultInfo> PostUniversalTransferDocumentAsync(CRPTOption settings, Models.V5_01.Seller.SellerUniversalTransferDocument sellerDataContract, bool isDraft = false) Parameters Type Name Description CRPTOption settings Настройки для API. CIS.EDM.Models.V5_01.Seller.SellerUniversalTransferDocument sellerDataContract Информация продавца. System.Boolean isDraft Создать только черновник. Не отправлять документ получателю. Returns Type Description System.Threading.Tasks.Task < ResultInfo > Идентификатор сообщения. | Improve this Doc View Source PostUniversalTransferDocumentAsync(CRPTOption, Models.V5_03.Seller.SellerUniversalTransferDocument, Boolean) Отправка универсального передаточного документа (УПД) в формате приказа \"№970\". Метод загрузки файла информации продавца УПД согласно приказа ФНС России от 19.12.2023 N ЕД-7-26/970@ (ред. от 15.11.2024) в формате XML Declaration public async Task<ResultInfo> PostUniversalTransferDocumentAsync(CRPTOption settings, Models.V5_03.Seller.SellerUniversalTransferDocument sellerDataContract, bool isDraft = false) Parameters Type Name Description CRPTOption settings Настройки для API. CIS.EDM.Models.V5_03.Seller.SellerUniversalTransferDocument sellerDataContract Информация продавца. System.Boolean isDraft Создать только черновник. Не отправлять документ получателю. Returns Type Description System.Threading.Tasks.Task < ResultInfo > Идентификатор сообщения."
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.ReceiptUniversalTransferDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.ReceiptUniversalTransferDocumentAsync.html",
    "title": "Method ReceiptUniversalTransferDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method ReceiptUniversalTransferDocumentAsync | Improve this Doc View Source ReceiptUniversalTransferDocumentAsync(CRPTOption, Models.V5_01.Buyer.BuyerUniversalTransferDocument) Добавление извещения о получении к документу в формате приказа \"№820\". Declaration public async Task<ResultInfo> ReceiptUniversalTransferDocumentAsync(CRPTOption settings, Models.V5_01.Buyer.BuyerUniversalTransferDocument buyerDataContract) Parameters Type Name Description CRPTOption settings Настройки для API. CIS.EDM.Models.V5_01.Buyer.BuyerUniversalTransferDocument buyerDataContract Информация покупателя. Returns Type Description System.Threading.Tasks.Task < ResultInfo > Идентификатор созданного извещения о получении | Improve this Doc View Source ReceiptUniversalTransferDocumentAsync(CRPTOption, Models.V5_03.Buyer.BuyerUniversalTransferDocument) Добавление извещения о получении к документу в формате приказа \"№970\". Declaration public async Task<ResultInfo> ReceiptUniversalTransferDocumentAsync(CRPTOption settings, Models.V5_03.Buyer.BuyerUniversalTransferDocument buyerDataContract) Parameters Type Name Description CRPTOption settings Настройки для API. CIS.EDM.Models.V5_03.Buyer.BuyerUniversalTransferDocument buyerDataContract Информация покупателя. Returns Type Description System.Threading.Tasks.Task < ResultInfo > Идентификатор созданного извещения о получении"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.SignOutgoingDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.SignOutgoingDocumentAsync.html",
    "title": "Method SignOutgoingDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method SignOutgoingDocumentAsync | Improve this Doc View Source SignOutgoingDocumentAsync(CRPTOption, String) Подписание исходящего документа Declaration public async Task SignOutgoingDocumentAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description System.Threading.Tasks.Task Implements ICRPTProvider.SignOutgoingDocumentAsync(CRPTOption, String)"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTProvider.ToString.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTProvider.ToString.html",
    "title": "Method ToString | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Текстовое представление провайдера. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.CIS-EDM-CRPT-Providers-ICRPTTokenProvider-GetTokenAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.CIS-EDM-CRPT-Providers-ICRPTTokenProvider-GetTokenAsync.html",
    "title": "Method ICRPTTokenProvider.GetTokenAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method ICRPTTokenProvider.GetTokenAsync | Improve this Doc View Source ICRPTTokenProvider.GetTokenAsync(CRPTOption) Declaration async Task<TokenModel> ICRPTTokenProvider.GetTokenAsync(CRPTOption settings) Parameters Type Name Description CRPTOption settings Returns Type Description System.Threading.Tasks.Task < TokenModel > Implements ICRPTTokenProvider.GetTokenAsync(CRPTOption)"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.-ctor.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.-ctor.html",
    "title": "Constructor CRPTTokenProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Constructor CRPTTokenProvider | Improve this Doc View Source CRPTTokenProvider(IHttpClientFactory) Declaration public CRPTTokenProvider(IHttpClientFactory httpClientFactory) Parameters Type Name Description IHttpClientFactory httpClientFactory"
  },
  "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.html": {
    "href": "api/CIS.EDM.CRPT.Providers.CRPTTokenProvider.html",
    "title": "Class CRPTTokenProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Class CRPTTokenProvider Inheritance System.Object CRPTTokenProvider Implements ICRPTTokenProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CIS.EDM.CRPT.Providers Assembly : CIS.EDM.CRPT.dll Syntax public class CRPTTokenProvider : ICRPTTokenProvider Constructors Name Description CRPTTokenProvider(IHttpClientFactory) Explicit Interface Implementations Name Description ICRPTTokenProvider.GetTokenAsync(CRPTOption)"
  },
  "api/CIS.EDM.CRPT.Providers.html": {
    "href": "api/CIS.EDM.CRPT.Providers.html",
    "title": "Namespace CIS.EDM.CRPT.Providers | Spoleto.CIS.EDM.CRPT",
    "keywords": "Namespace CIS.EDM.CRPT.Providers Classes CRPTProvider Провайдер для работы с ЭДО от ЦРПТ. CRPTTokenProvider Interfaces ICRPTProvider Провайдер для работы с ЭДО от ЦРПТ. ICRPTTokenProvider"
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTProvider.GetIncomingSignedDocumentInfo.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTProvider.GetIncomingSignedDocumentInfo.html",
    "title": "Method GetIncomingSignedDocumentInfo | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetIncomingSignedDocumentInfo | Improve this Doc View Source GetIncomingSignedDocumentInfo(CRPTOption, String) Получение информации о документе (его тела и открепленной подписи). Declaration virtual SignedDocumentInfo GetIncomingSignedDocumentInfo(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description SignedDocumentInfo"
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTProvider.GetIncomingSignedDocumentInfoAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTProvider.GetIncomingSignedDocumentInfoAsync.html",
    "title": "Method GetIncomingSignedDocumentInfoAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetIncomingSignedDocumentInfoAsync | Improve this Doc View Source GetIncomingSignedDocumentInfoAsync(CRPTOption, String) Получение информации о документе (его тела и открепленной подписи). Declaration Task<SignedDocumentInfo> GetIncomingSignedDocumentInfoAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description System.Threading.Tasks.Task < SignedDocumentInfo >"
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTProvider.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTProvider.html",
    "title": "Interface ICRPTProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Interface ICRPTProvider Провайдер для работы с ЭДО от ЦРПТ. Namespace : CIS.EDM.CRPT.Providers Assembly : CIS.EDM.CRPT.dll Syntax public interface ICRPTProvider Methods Name Description GetIncomingSignedDocumentInfo(CRPTOption, String) Получение информации о документе (его тела и открепленной подписи). GetIncomingSignedDocumentInfoAsync(CRPTOption, String) Получение информации о документе (его тела и открепленной подписи). SignOutgoingDocumentAsync(CRPTOption, String) Подписание исходящего документа"
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTProvider.SignOutgoingDocumentAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTProvider.SignOutgoingDocumentAsync.html",
    "title": "Method SignOutgoingDocumentAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method SignOutgoingDocumentAsync | Improve this Doc View Source SignOutgoingDocumentAsync(CRPTOption, String) Подписание исходящего документа Declaration Task SignOutgoingDocumentAsync(CRPTOption settings, string documentId) Parameters Type Name Description CRPTOption settings Настройки для API System.String documentId Идентификатор документа Returns Type Description System.Threading.Tasks.Task"
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.GetToken.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.GetToken.html",
    "title": "Method GetToken | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetToken | Improve this Doc View Source GetToken(CRPTOption) Метод для получения токена. Declaration virtual TokenModel GetToken(CRPTOption settings) Parameters Type Name Description CRPTOption settings Настройки провайдера. Returns Type Description TokenModel Токена доступа."
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.GetTokenAsync.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.GetTokenAsync.html",
    "title": "Method GetTokenAsync | Spoleto.CIS.EDM.CRPT",
    "keywords": "Method GetTokenAsync | Improve this Doc View Source GetTokenAsync(CRPTOption) Метод для получения токена. Declaration Task<TokenModel> GetTokenAsync(CRPTOption settings) Parameters Type Name Description CRPTOption settings Настройки провайдера. Returns Type Description System.Threading.Tasks.Task < TokenModel > Токена доступа."
  },
  "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.html": {
    "href": "api/CIS.EDM.CRPT.Providers.ICRPTTokenProvider.html",
    "title": "Interface ICRPTTokenProvider | Spoleto.CIS.EDM.CRPT",
    "keywords": "Interface ICRPTTokenProvider Namespace : CIS.EDM.CRPT.Providers Assembly : CIS.EDM.CRPT.dll Syntax public interface ICRPTTokenProvider Methods Name Description GetToken(CRPTOption) Метод для получения токена. GetTokenAsync(CRPTOption) Метод для получения токена."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Документация | Spoleto.CIS.EDM.CRPT",
    "keywords": "API Документация API документация сформирована на основе подробных комментариев из программного кода. Каждая бизнес модель, которая отражает данные электронного документооборота, содержит ссылку на её описание на сайте КонсультантПлюс ."
  },
  "articles/crpt.quickstart.html": {
    "href": "articles/crpt.quickstart.html",
    "title": "Быстрый старт | Spoleto.CIS.EDM.CRPT",
    "keywords": "Быстрый старт Клиент написан на C#, .NET Core 3.1 с использованием Dependency Injection от Microsoft . Определение зависимостей services.AddHttpClient(); services.AddTransient<ICRPTTokenProvider, CRPTTokenProvider>(); services.AddTransient<IEdmProvider, CRPTProvider>(); Инициализация сертификата и адреса сервиса ЦРПТ var certificateThumbprint = \"12345\"; var option = new CRPTOption { ServiceUrl = \"https://markirovka.sandbox.crptech.ru/\", CertificateThumbprint = certificateThumbprint }; option.CertificateThumbprint = certificateThumbprint; Создание документа с информацией продавца В данном примере максимально заполнены все свойства документа. В реальной ситуации необходимо указывать только нужные свойства. private static SellerUniversalTransferDocument CreateSellerDataContract() { var function = UniversalTransferDocumentFunction.ДОП; var docDate = DateTime.Parse(\"2023-11-24\"); var docNumber = \"111 v.5.03 (by API) \" + DateTime.Now.ToString(\"yyyyMMdd_HHmmss\"); var dataContract = new SellerUniversalTransferDocument { DocumentUid = \"1234567890\", Function = function, SenderEdmParticipant = new EdmParticipant(\"2LT\", \"111\"), RecipientEdmParticipant = new EdmParticipant(\"2LT\", \"222\"), Sellers = new() { new () { OrganizationIdentificationInfo = new() { LegalPerson = new() { Name = \"ООО \\\"Продавец\\\"\", Inn = \"7776666666\", Kpp = \"772222222\", } }, Okpo = \"52573834\", Department = \"Департамент по умолчанию\", Address = new() { RussianAddress = new() { ZipCode = \"123007\", RegionCode = \"77\", Street = \"Тверская\", Building = \"2\", Block = \"2\" } }, Contact = new() { EmailList = [\"test@test.ru\"], PhoneList = [\"7 495 123 1234\"], }, BankAccountDetails = new() { BankAccountNumber = \"123456\", BankDetails = new() { BankName = \"Test bank\", BankId = \"123456789\", CorrespondentAccount = \"123456\" } } } }, Shippers = new() { new() { OrganizationIdentificationInfo = new() { LegalPerson = new() { Name = \"ООО \\\"Продавец\\\"\", Inn = \"7776666666\", Kpp = \"772222222\", } }, Okpo = \"52575757\", Department = \"Департамент по умолчанию\", Address = new() { RussianAddress = new() { ZipCode = \"123007\", RegionCode = \"77\", Street = \"Тверская\", Building = \"2\", Block = \"2\" } }, Contact = new() { EmailList = [\"test@test.ru\"], PhoneList = [\"7 495 123 1234\"], }, BankAccountDetails = new() { BankAccountNumber = \"123456\", BankDetails = new() { BankName = \"Test bank\", BankId = \"123456789\", CorrespondentAccount = \"123456\" } } } }, Buyers = new() { new() { OrganizationIdentificationInfo = new() { LegalPerson = new() { Name = \"ООО \\\"Рога и Копыта\\\"\", Inn = \"7777777777\", Kpp = \"771111111\", } }, Okpo = \"25469637\", Address = new() { RussianAddress = new() { ZipCode = \"119270\", RegionCode = \"77\", Street = \"Тверская\", Building = \"1\", Block = \"1\" } }, BankAccountDetails = new() { BankAccountNumber = \"40702810820000000147\", BankDetails = new() { BankName = \"ФИЛИАЛ БАНКА\", BankId = \"044111111\", CorrespondentAccount = \"30111111111111111111\" } } } }, Consignees = new() { new() { OrganizationIdentificationInfo = new() { LegalPerson = new() { Name = \"ООО \\\"Рога и Копыта\\\"\", Inn = \"7777777777\", Kpp = \"771111111\", } }, Okpo = \"25222222\", Address = new() { RussianAddress = new() { ZipCode = \"119270\", RegionCode = \"77\", Street = \"Тверская\", Building = \"1\", Block = \"1\" } }, BankAccountDetails = new() { BankAccountNumber = \"407111111111111111\", BankDetails = new() { BankName = \"ФИЛИАЛ БАНКА\", BankId = \"044111111\", CorrespondentAccount = \"30111111111111111111\" } } } }, Signers = [ new () { JobTitle = \"Генеральный директор\", AuthorityConfirmationType = Models.V5_03.Reference.AuthorityConfirmationType.ElectronicSignatureData, Person = new () { Surname = \"Петров\", FirstName = \"Пётр\", Patronymic = \"Петрович\", }, } ], DocumentDate = docDate, DocumentNumber = docNumber, CurrencyCode = \"643\", AdditionalTransactionParticipantInfo = new() { GovernmentContractInfo = \"12345678901234567890\", InvoiceFormationType = InvoiceFormationType.СommissionAgentSales, UPDFormationType = \"00006\", MainAssignMonetaryClaim = new() { Date = DateTime.Parse(\"2021-11-02\"), DocumentId = \"55553\", OtherInfo = \"Доп инфо тут\", Name = \"Кастомный документ\", Number = \"Уступка 1\" } }, TransferInfo = new TransferInfo { TransferDetails = new() { Date = DateTime.Parse(\"2022-01-12\"), SenderPerson = new() { Employee = new() { JobTitle = \"Кладовщик\", Surname = \"Иванов\", FirstName = \"Ваня\", Patronymic = \"Иванович\", } }, Transportation = new() { TransferTextInfo = \"Информация о транспортировке тут\", }, TransferDocuments = [ new () { Date = DateTime.Parse(\"2022-01-02\"), Name = \"Документ об отгрузке\", Number = \"Док №111\" } ], CreatedThingInfo = new() { Information = \"Инфа о созданной вещи\", Date = DateTime.Parse(\"2022-01-01\") }, OperationType = \"Операция по отгрузке наша\", StartDate = DateTime.Parse(\"2022-01-01\"), EndDate = DateTime.Parse(\"2022-03-02\") }, OtherEconomicInfo = new() { InfoFileId = Guid.NewGuid().ToString(), Items = new() { new OtherEconomicInfoItem { Id = \"АйдиДляОтгрузки\", Value = \"И тут Айди\" } } } }, DocumentShipmentList = [ new () { Date = docDate, Name = function.GetDocumentName(), Number = docNumber }, new () { Date = docDate, Name = function.GetDocumentName(), Number = docNumber } ], OtherEconomicInfo = new() { InfoFileId = Guid.NewGuid().ToString(), Items = new() { new OtherEconomicInfoItem { Id = \"Айди\", Value = \"123\" }, new OtherEconomicInfoItem { Id = \"Тест\", Value = \"Тест!\" } } }, PaymentDocumentInfoList = new() { new PaymentDocumentInfo { Date = DateTime.Parse(\"2021-12-15\"), Number = \"1\", Total = 951000M }, new PaymentDocumentInfo { Date = DateTime.Parse(\"2021-12-20\"), Number = \"2\", Total = 356000M }, new PaymentDocumentInfo { Date = DateTime.Parse(\"2021-12-23\"), Number = \"3\" } }, CurrencyRate = 1M, CurrencyName = \"RUB\", //SellerInfoCircumPublicProc = new() //{ // DateStateContract = DateTime.Parse(\"2021-12-01\"), // NumberStateContract = \"111\", // PersonalAccountSeller = \"12345678901\", // SellerBudgetClassCode = \"44332211334455667788\", // SellerTargetCode = \"54321234567890123456\", // SellerTreasuryCode = \"999\", // SellerTreasuryName = \"деревня Пестово\" //}, //ApprovedStructureAdditionalInfoFields = \"1234.5678.9872\",//todo: DocumentCreatorBase = new() { Name = \"Основание доверия\", Number = \"123\", Date = DateTime.Parse(\"2021-11-01\") }, //RevisionNumber = \"1\", //RevisionDate = DateTime.Parse(\"2022-02-04\") }; //dataContract.Shippers = dataContract.Sellers; //dataContract.Consignees = dataContract.Buyers; dataContract.AdditionalTransactionParticipantInfo.FactorInfo = dataContract.Sellers[0]; dataContract.DocumentCreator = dataContract.Sellers[0]; dataContract.Items = new() { new InvoiceItem { ProductName = \"Пальто замшевое\", Quantity = 1, Price = 100000, SumWithoutVat = 100000, Sum = 120000, Vat = 20000, TaxRate = TaxRate.TwentyPercent, UnitCode = \"796\", UnitName = \"штука\", CustomsDeclarationList = new() { new CustomsDeclaration { //CountryCode = \"643\", DeclarationNumber = \"12345678/123456/1234567\" }, new CustomsDeclaration { //CountryCode = \"643\", DeclarationNumber = \"12345678/123456/456789\" } }, AdditionalInfo = new() { Article = \"12345678\", Code = \"1234\", Characteristic = \"Хороший товар\", CountryNames = [], //ItemTracingInfoList = new() //{ // new InvoiceItemTracingInfo // { // RegNumberUnit = \"123\", // Quantity = 1, // UnitCode = \"796\", // AdditionalInfo = \"доп информация.\" // }, // new InvoiceItemTracingInfo // { // RegNumberUnit = \"456\", // Quantity = 1, // UnitCode = \"796\", // AdditionalInfo = \"доп информация. #2\" // } //}, ItemIdentificationNumberList = new() { new() { SecondaryPackageItems = new() { \"RU-12345-ABC12345\", \"123456\" }, PackageId = \"1122667788\", }, new() { MarkItems = new() { \"RU-1234567-ABC123547\", \"11112222\" }, } }, FeaccCode = \"8528599009\", }, OtherEconomicInfoItemList = new() { new OtherEconomicInfoItem { Id = \"АйдиТовара\", Value = \"ТутАйди\" }, new OtherEconomicInfoItem { Id = \"Признак\", Value = \"ИЗначениеПризнака\" } } }, new InvoiceItem { ProductName = \"Трико замшевое\", Quantity = 1, Price = 100000, SumWithoutVat = 100000, Sum = 120000, Vat = 20000, TaxRate = TaxRate.TwentyPercent, UnitCode = \"796\", UnitName = \"штука\", CustomsDeclarationList = new() { new CustomsDeclaration { CountryCode = \"643\", DeclarationNumber = \"10702030/261219/0041146\" }, new CustomsDeclaration { CountryCode = \"643\", DeclarationNumber = \"15324/123/987654\" } }, AdditionalInfo = new() { Article = \"12012025\", Code = \"1935\", Characteristic = \"Ну очень хороший товар\", Kind = \"СОРТ№\", Type = InvoiceItemType.Property, CatalogCode = \"Каталожный код жлофыво лврп\", AdditionalTypeInfo = \"ИНФА\", CountryNames = [\"Россия\", \"Россия\"], //ItemTracingInfoList = new() //{ // new InvoiceItemTracingInfo // { // RegNumberUnit = \"123\", // Quantity = 1, // UnitCode = \"796\", // UnitName = \"шт.\", // AdditionalInfo = \"доп информация.\" // }, // new InvoiceItemTracingInfo // { // RegNumberUnit = \"456\", // Quantity = 1, // UnitCode = \"796\", // UnitName = \"шт.\", // AdditionalInfo = \"доп информация. #2\" // } //}, //ItemIdentificationNumberList = new() //{ // new() // { // //ItemNumbers = new() { \"RU-123-12345\", \"1234\" }, // PackageId = \"1122667788\", // SecondaryPackageIds = new() { \"123456\", \"123\" } // }, // new() { ItemNumbers = new() { \"RU-123-12345\", \"2222333\" } } //}, FeaccCode = \"8528599009\" } } }; return dataContract; } Отправка документа var provider = services.GetRequiredService<IEdmProvider>(); var documentId = await provider.PostUniversalTransferDocumentAsync(option, sellerDataContract); Результатом выполнения метода PostUniversalTransferDocument будет идентификатор отправленного сообщения ( documentId ). Помимо асинхронной версии метода есть еще и обычная версия PostUniversalTransferDocument . Создание документа с информацией покупателя private static BuyerUniversalTransferDocument CreateBuyerDataContract() { var buyerDataContract = new BuyerUniversalTransferDocument { SenderEdmParticipant = new EdmParticipant(\"2LT\", \"222\"), RecipientEdmParticipant = new EdmParticipant(\"2LT\", \"111\"), DocumentCreator = new() { OrganizationIdentificationInfo = new() { LegalPerson = new() { Name = \"ООО \\\"Рога и Копыта\\\"\", Inn = \"7777777777\", Kpp = \"771111111\" } } }, EdmOperator = new() { OperatorId = \"2LT\", Name = \"ООО \\\"Оператор-ЦРПТ\\\"\", Inn = \"7731376812\" }, AcceptanceInfo = new() { Date = DateTime.Parse(\"2022-01-21\"), ReceiverPerson = new() { Employee = new() { JobTitle = \"Кладовщик\", Surname = \"Сидоров\", FirstName = \"Сидр\", Patronymic = \"Сидорович\", } }, }, OtherEconomicInfo = new() { InfoFileId = Guid.NewGuid().ToString(), Items = new() { new OtherEconomicInfoItem { Id = \"АйдиПолучения\", Value = \"Уникальное Айди\" }, new OtherEconomicInfoItem { Id = \"ИЕщеАйди\", Value = \"Другое уникальное Айди\" } } }, BuyerInfoCircumPublicProc = new() { BuyerBudgetObligationAccountNumber = \"1234567890123456\", BuyerBudgetRegisterNumber = \"11111111\", BuyerFinancialAuthorityName = \"Автор центр\", PersonalAccountBuyer = \"12345678902\", BuyerMunicipalCode = \"12345678\", FinancialObligationInfoList = new List<FinancialObligationInfo> { new() { RowNumber=1, FundType= Models.Buyer.Reference.FundType.AdditionalBudget, BuyerBudgetClassCode = \"12345678901234567890\", AmountAdvance=999.9M } }, BuyerTreasuryName = \"деревня Калмыково\", BuyerTreasuryCode = \"6666\", }, Signers = new List<BuyerSigner> { new () { LegalPersonRepresentative = new () { JobTitle = \"Генеральный директор\", FirstName = \"Марина\", Surname = \"Фёдорова\", Patronymic = \"Николаевна\", Inn = \"7777777777\", OrgName = \"ООО \\\"Рога и Копыта\\\"\", OtherInfo = \"Прочая инфа о подписанте покупателя\" } } }, EdmDocumentId = \"74cf35bd-290b-4c4d-b7e3-88ae4b3e4111\" }; return buyerDataContract; } Свойство EdmDocumentId содержит идентификатор сообщения продавца. На основе этого идентификатора автоматически заполнится часть свойств в документе покупателя, которые относятся к информации продавца. Подписание входящего документа var provider = services.GetRequiredService<IEdmProvider>(); var documentId = await provider.ReceiptUniversalTransferDocumentAsync(option, buyerDataContract); Результатом выполнения метода ReceiptUniversalTransferDocumentAsync будет идентификатор уведомления о получении сообщения ( PatchDocumentWithReceiptAsync ). Помимо асинхронной версии метода есть еще и обычная версия ReceiptUniversalTransferDocument ."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Общая информация | Spoleto.CIS.EDM.CRPT",
    "keywords": "Общая информация На данный момент SDK реализовано для ЭДО от ЦРПТ. В роли технологии используется .NET Core. Поэтому такую библиотеку можно подключить как в Desktop приложения, так и в Web, а также в мобильные (Xamarin, MAUI)."
  },
  "articles/models.html": {
    "href": "articles/models.html",
    "title": "Модели данных | Spoleto.CIS.EDM.CRPT",
    "keywords": "Модели данных Все модели данных описаны здесь . Например, Модели данных, используемых для формирования файла продавца, находятся здесь . Модели данных, используемых для формирования файла покупателя, находятся здесь ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Библиотека для интеграции с ЭДО системы Честный ЗНАК | Spoleto.CIS.EDM.CRPT",
    "keywords": "Библиотека для интеграции с ЭДО системы Честный ЗНАК Данный программный комплекс представляет собой C# клиент для полноценной работы с сервисом электронного документооборота API ЭДО Lite от ЦРПТ (C# SDK). Быстрый старт Работа с клиентом описана здесь . Ресурсы Исходный код: https://github.com/spoleto-software/CIS.EDM.CRPT/ Nuget пакет: https://www.nuget.org/packages/Spoleto.CIS.EDM.CRPT/"
  }
}